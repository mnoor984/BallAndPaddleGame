namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;

   public Game findGame(String name)
    {
      for(Game game : games)
      {
        if (game.getName().equals(name))
        {
          return game;
        }
      }
      return null;
    }
   public PlayedGame findPlayableGame(int id) {
		for (PlayedGame game : playedGames) {
			if (game.getId() == id) {
				return game;
			}
		}
	    return null;
	}	
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;

   before constructor, setUsername {
   	if (aUsername == null || aUsername.length() == 0) {
   		throw new RuntimeException("The username must be specified.");
   	}
   }
   
   	public static String findUsername(UserRole ur) {
		for (String username : usersByUsername.keySet())
	    {
		   User value = usersByUsername.get(username);
		   for(UserRole role : value.roles)
		   {
			   if(ur == role) return username;
		   }
	    }
	    return null;
	}
}

class UserRole {
   abstract;
   password;

   before constructor, setPassword {
   	if (aPassword == null || aPassword == "") {
   		throw new RuntimeException("The player password needs to be specified.");
   	}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   before constructor {
   	if(aBlock223.findGame(aName) != null) {
    	throw new RuntimeException("The name of a game must be unique.");
    }
   }
   before constructor, setName {
   	if(aName == null || aName.length() == 0){
   		throw new RuntimeException("The name of a game must be specified.");
   	}
   }
   Integer nrBlocksPerLevel;
   before constructor, setNrBlocksPerLevel {
   	if(aNrBlocksPerLevel <= 0){
   		throw new RuntimeException("The number of blocks per level must be greater than zero.");
   	}
   }
   before setNrBlocksPerLevel {
   	if(hasLevels()) {
    	List<Level> levels = getLevels();
    	for (Level level : levels) {
    		if (level.numberOfBlockAssignments() > aNrBlocksPerLevel) {
    			throw new RuntimeException("The maximum number of blocks per level cannot be less than the number of existing blocks in a level.");
    		}
    	}
    }
   }
   before getLevel {
   	if(index < 0 || index > numberOfLevels() - 1) {
   		throw new IndexOutOfBoundsException("Level " + (index + 1) + " does not exist for the game.");
   	}
   }
   
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;

   public Block findBlock(int id){
   	List<Block> blocks = getBlocks();
   	for(Block block: blocks){
   		if(id==block.getId()){
   			return block;
   		}
   	}
   	return null;
   }
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000;
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   before constructor, setRed {
   	if(aRed < MIN_COLOR || aRed > MAX_COLOR){
   		throw new RuntimeException("Red must be between 0 and 255.");
   	}
   }

   Integer green;
   before constructor, setGreen {
   	if(aGreen < MIN_COLOR || aGreen > MAX_COLOR){
   		throw new RuntimeException("Green must be between 0 and 255.");
   	}
   }
   Integer blue;
   before constructor, setBlue {
   	if(aBlue < MIN_COLOR || aBlue > MAX_COLOR){
   		throw new RuntimeException("Blue must be between 0 and 255.");
   	}
   }
   Integer points;
   before constructor, setPoints {
   	if(aPoints < MIN_POINTS || aPoints > MAX_POINTS){
   		throw new RuntimeException("Points must be between 1 and 1000.");
   	}
   }

}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
	public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition) {
		int h, v;
		List<BlockAssignment> assignments = this.getBlockAssignments();
		for (BlockAssignment assignment : assignments) {
			h = assignment.getGridHorizontalPosition();
			v = assignment.getGridVerticalPosition();
			if (h == gridHorizontalPosition && v == gridVerticalPosition) {
				return assignment;
			}
		}
		return null;
	}
}

class BlockAssignment {

   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   const Integer MAX_NR_HORZ_BLOCKS = (int) (Game.PLAY_AREA_SIDE - (2 * Game.WALL_PADDING) + Game.COLUMNS_PADDING) / (Game.COLUMNS_PADDING + Block.SIZE);
   const Integer MAX_NR_VERT_BLOCKS = (int) (Game.PLAY_AREA_SIDE - Game.WALL_PADDING + Game.ROW_PADDING - Paddle.VERTICAL_DISTANCE - Paddle.PADDLE_WIDTH - Ball.BALL_DIAMETER) / (Game.ROW_PADDING + Block.SIZE);
   * -- 1 Level level;
   * -- 1 Block block;
   before constructor, setGridHorizontalPosition {
   	if (aGridHorizontalPosition < 1 || aGridHorizontalPosition > MAX_NR_HORZ_BLOCKS) {
    	throw new RuntimeException("The horizontal position must be between 1 and " + MAX_NR_HORZ_BLOCKS + ".");
    	}
  	}
	before constructor, setGridVerticalPosition {
    if (aGridVerticalPosition < 1 || aGridVerticalPosition > MAX_NR_VERT_BLOCKS) {
    	throw new RuntimeException("The vertical position must be between 1 and " + MAX_NR_VERT_BLOCKS + ".");    	
    	}
 	}
}

class Ball {
   const Integer BALL_DIAMETER = 10;
    Integer minBallSpeedX;
   before constructor, setMinBallSpeedX {
   	if(aMinBallSpeedX < 0){
   		throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   	}
   }
      Integer minBallSpeedY;
 	before constructor, setMinBallSpeedY {
   	if(aMinBallSpeedY < 0){
   		throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   	}
   }
   Double ballSpeedIncreaseFactor;
   before constructor, setBallSpeedIncreaseFactor {
   	if(aBallSpeedIncreaseFactor <= 0){
   		throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
   	}
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   before constructor, setMaxPaddleLength {
   	if(aMaxPaddleLength <= 0 || aMaxPaddleLength > 390){
   		throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
   	}
   }
   Integer minPaddleLength;
   before constructor, setMinPaddleLength {
   	if(aMinPaddleLength <= 0){
   		throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
   	}
   }
}
